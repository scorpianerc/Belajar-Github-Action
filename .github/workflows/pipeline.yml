name: ML Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  train-and-test:
    runs-on: self-hosted
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -t mlops-model -f docker/Dockerfile.model .

    - name: Run training in Docker
      run: docker run --rm -v "${{ github.workspace }}/model:/app/model" -v "${{ github.workspace }}/iris_dataset.csv:/app/model/iris_dataset.csv" mlops-model

    - name: Test model
      run: docker run --rm -v "${{ github.workspace }}/model:/app/model" -v "${{ github.workspace }}/iris_dataset.csv:/app/model/iris_dataset.csv" mlops-model python test.py

    - name: Check accuracy
      run: |
        $ACCURACY = Get-Content model/accuracy.txt
        Write-Host "Model accuracy: $ACCURACY"
        
        python -c "
        accuracy = float(open('model/accuracy.txt').read())
        if accuracy > 0.7:
            print('Model performance: BAIK (> 70%)')
        elif accuracy > 0.5:
            print('Model performance: CUKUP (> 50%)')
        else:
            print('Model performance: KURANG (< 50%)')
            exit(1)
        "
  
  Save Model:
    runs-on: self-hosted
    needs: train-and-test
    steps:

    - name: Save model
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: |
          model/model.pkl
          model/accuracy.txt
    
    - name: Show results
      run: |
        echo "Training dan testing selesai!"
        echo "Accuracy: $(cat model/accuracy.txt)"
  
  deploy:
    runs-on: self-hosted
    needs: Save Model
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download model artifact
      uses: actions/download-artifact@v4
      with:
        name: trained-model
    
    - name: Build and Deploy API
      run: |
        docker compose build
        docker compose up -d api
    
    - name: Test API
      run: |
        sleep 10  # Wait for the API to start
        curl -X POST http://localhost:5000/predict -H "Content-Type: application/json" -d "{\"data\": [5.1, 3.5, 1.4, 0.2]}"